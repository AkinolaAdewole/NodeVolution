
In Node.js, working with JSON (JavaScript Object Notation) is quite common, 
as it is a lightweight data interchange format that is easy to read and write for both humans and machines. 
Node.js provides built-in support for working with JSON data through the JSON object, which includes methods for parsing 
JSON strings into JavaScript objects and stringifying JavaScript objects into JSON strings.

Here are the two primary methods provided by the JSON object:

1.
JSON.parse(): This method is used to convert a JSON string into a JavaScript object.
Syntax:

const jsonString = '{"name": "John", "age": 30, "city": "New York"}';
const person = JSON.parse(jsonString);

console.log(person.name); // Output: John
console.log(person.age);  // Output: 30
console.log(person.city); // Output: New York


2.
JSON.stringify(): This method is used to convert a JavaScript object into a JSON string.
Syntax:

const person = {
  name: "John",
  age: 30,
  city: "New York"
};

const jsonString = JSON.stringify(person);
console.log(jsonString);
// Output: {"name":"John","age":30,"city":"New York"}


These methods are handy for handling data in a structured format when exchanging data between a Node.js application and other systems, 
like web servers, databases, or APIs, that use JSON for data communication.

Keep in mind that JSON is a subset of JavaScript object literals and has some restrictions. 
For instance, property names must be wrapped in double quotes, and it doesn't support functions or circular references. 
However, it is still widely used due to its simplicity and compatibility with many programming languages and platforms.
