In Node.js, working with JSON (JavaScript Object Notation) is straightforward, as JSON is a built-in data interchange format that 
closely resembles JavaScript objects. JSON is used for representing structured data, and it is widely used for configuration files, 
APIs, and data exchanges between different systems.

Node.js provides two main methods for working with JSON:

1.
JSON.stringify(): This method is used to convert a JavaScript object or value to a JSON string.

Syntax:

const jsonObject = { key1: value1, key2: value2, ... };
const jsonString = JSON.stringify(jsonObject);


Example:

const person = {
  name: 'John Doe',
  age: 30,
  email: 'john@example.com'
};

const jsonString = JSON.stringify(person);
console.log(jsonString);



Output:

{"name":"John Doe","age":30,"email":"john@example.com"}

2.
JSON.parse(): This method is used to parse a JSON string and convert it back into a JavaScript object.
Syntax:

const jsonString = '{"key1":"value1","key2":"value2",...}';
const jsonObject = JSON.parse(jsonString);


Example:

const jsonString = '{"name":"John Doe","age":30,"email":"john@example.com"}';
const person = JSON.parse(jsonString);
console.log(person.name); // Output: John Doe
console.log(person.age);  // Output: 30
console.log(person.email); // Output: john@example.com



It's important to note that JSON only supports a limited set of data types, which include objects, arrays, strings, numbers, booleans, 
and null values. When using JSON.stringify(), any function properties or properties with undefined values will be omitted from the 
resulting JSON string. Similarly, JSON.parse() will create a JavaScript object from the JSON string but won't include function 
properties.

JSON is widely used for data interchange and communication between client and server in web development. Node.js provides a convenient 
way to work with JSON using these methods, making it easy to convert JavaScript objects to JSON strings and vice versa.
