In Node.js, the Event Emitter is a core module that provides a way to handle and work with events. 
It allows objects (usually called "emitters") to raise custom events and register listeners (also known as "event handlers") to 
respond to those events when they occur. This pattern is known as the "Observer Pattern" or "Publish/Subscribe Pattern."

To use the Event Emitter, you need to create an instance of the EventEmitter class, which is available in the events module.

Here's an example of how to use the Event Emitter in Node.js:

const EventEmitter = require('events');

// Create an instance of the EventEmitter
const myEmitter = new EventEmitter();

// Register an event listener for the 'greet' event
myEmitter.on('greet', (name) => {
  console.log(`Hello, ${name}!`);
});

// Emit the 'greet' event with the argument 'John'
myEmitter.emit('greet', 'John');


In this example, we first import the events module and create an instance of the EventEmitter class named myEmitter.

We then register an event listener using the .on() method. The event listener is associated with the event named 'greet'. 
When the 'greet' event is emitted (using the .emit() method), 
the registered listener function is executed with the argument 'John', resulting in the output: Hello, John!.

The Event Emitter is powerful and flexible. You can register multiple listeners for the same event, and they will all be 
executed when the event is emitted. You can also remove listeners using the .removeListener() method and perform various other 
operations related to event handling.

Here's an example with multiple event listeners:

const EventEmitter = require('events');

const myEmitter = new EventEmitter();

myEmitter.on('greet', (name) => {
  console.log(`Hello, ${name}!`);
});

myEmitter.on('greet', (name) => {
  console.log(`Hi, ${name}!`);
});

myEmitter.emit('greet', 'John');


Output is:
Hello, John!
Hi, John!


Both event listeners are executed when the 'greet' event is emitted.

The Event Emitter is widely used in Node.js for building event-driven applications, handling asynchronous operations, and creating 
custom event-based APIs. It is a fundamental part of many Node.js modules and frameworks, including 
the built-in http module for creating web servers and the popular third-party library socket.io for real-time communication.
